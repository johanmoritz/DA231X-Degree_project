

@article{kannengieser_trade-offs_2021,
  title        = {Trade-offs between Distributed Ledger Technology Characteristics},
  volume       = {53},
  issn         = {0360-0300, 1557-7341},
  url          = {https://dl.acm.org/doi/10.1145/3379463},
  doi          = {10.1145/3379463},
  abstract     = {When developing peer-to-peer applications on distributed ledger technology ({DLT}), a crucial decision is the selection of a suitable {DLT} design (e.g., Ethereum), because it is hard to change the underlying {DLT} design post hoc. To facilitate the selection of suitable {DLT} designs, we review {DLT} characteristics and identify trade-offs between them. Furthermore, we assess how {DLT} designs account for these trade-offs and we develop archetypes for {DLT} designs that cater to specific requirements of applications on {DLT}. The main purpose of our article is to introduce scientific and practical audiences to the intricacies of {DLT} designs and to support development of viable applications on {DLT}.},
  pages        = {1--37},
  number       = {2},
  journaltitle = {{ACM} Computing Surveys},
  shortjournal = {{ACM} Comput. Surv.},
  author       = {Kannengießer, Niclas and Lins, Sebastian and Dehling, Tobias and Sunyaev, Ali},
  urldate      = {2022-02-16},
  date         = {2021-03-31},
  langid       = {english},
  file         = {Full Text:C\:\\Users\\johan.moritz\\Zotero\\storage\\QZPC5FTQ\\Kannengießer et al. - 2021 - Trade-offs between Distributed Ledger Technology C.pdf:application/pdf}
}

@patent{merkle_method_1982,
  title    = {Method of providing digital signatures},
  holder   = {Univ Leland Stanford Junior},
  abstract = {The invention comprises a method of providing a digital signature for purposes of authentication of a message, which utilizes an authentication tree function of a one-way function of a secret number.},
  type     = {patentus},
  number   = {4309569A},
  author   = {Merkle, Ralph C.},
  date     = {1982-01-05}
}

@article{lamb_reproducible_2021,
  title        = {Reproducible Builds: Increasing the Integrity of Software Supply Chains},
  issn         = {1937-4194},
  doi          = {10.1109/MS.2021.3073045},
  shorttitle   = {Reproducible Builds},
  abstract     = {Although it is possible to increase conﬁdence in Free and Open Source Software ({FOSS}) by reviewing its source code, trusting code is not the same as trusting its executable counterparts. These are typically built and distributed by third-party vendors, with severe security consequences if their supply chains are compromised. In this paper, we present reproducible builds, an approach that can determine whether generated binaries correspond with their original source code. We ﬁrst deﬁne the problem, and then provide insight into the challenges of making real-world software build in a “reproducible” manner—this is, when every build generates bit-for-bit identical results. Through the experience of the Reproducible Builds project making the Debian Linux distribution reproducible, we also describe the afﬁnity between reproducibility and quality assurance ({QA}).},
  pages        = {0--0},
  journaltitle = {{IEEE} Software},
  author       = {Lamb, Chris and Zacchiroli, Stefano},
  date         = {2021},
  note         = {Conference Name: {IEEE} Software},
  keywords     = {Software, Linux, Buildings, Metadata, Reproducibility of results, Supply chains, Tools},
  file         = {IEEE Xplore Full Text PDF:C\:\\Users\\johan.moritz\\Zotero\\storage\\UTAVBYM3\\Lamb and Zacchiroli - 2021 - Reproducible Builds Increasing the Integrity of S.pdf:application/pdf;IEEE Xplore Abstract Record:C\:\\Users\\johan.moritz\\Zotero\\storage\\43FD77P6\\9403390.html:text/html}
}

@article{daniel_ipfs_2022,
  title        = {{IPFS} and Friends: A Qualitative Comparison of Next Generation Peer-to-Peer Data Networks},
  url          = {http://arxiv.org/abs/2102.12737},
  shorttitle   = {{IPFS} and Friends},
  abstract     = {Decentralized, distributed storage offers a way to reduce the impact of data silos as often fostered by centralized cloud storage. While the intentions of this trend are not new, the topic gained traction due to technological advancements, most notably blockchain networks. As a consequence, we observe that a new generation of peer-to-peer data networks emerges. In this survey paper, we therefore provide a technical overview of the next generation data networks. We use select data networks to introduce general concepts and to emphasize new developments. Speciﬁcally, we provide a deeper outline of the Interplanetary File System and a general overview of Swarm, the Hypercore Protocol, {SAFE}, Storj, and Arweave. We identify common building blocks and provide a qualitative comparison. From the overview, we derive future challenges and research goals concerning data networks.},
  journaltitle = {{arXiv}:2102.12737 [cs]},
  author       = {Daniel, Erik and Tschorsch, Florian},
  urldate      = {2022-02-02},
  date         = {2022-01-18},
  langid       = {english},
  eprinttype   = {arxiv},
  eprint       = {2102.12737},
  keywords     = {Computer Science - Networking and Internet Architecture},
  file         = {Daniel and Tschorsch - 2022 - IPFS and Friends A Qualitative Comparison of Next.pdf:C\:\\Users\\johan.moritz\\Zotero\\storage\\9UBZU7SE\\Daniel and Tschorsch - 2022 - IPFS and Friends A Qualitative Comparison of Next.pdf:application/pdf}
}

@report{laurie_certificate_2013,
  title       = {Certificate Transparency},
  url         = {https://datatracker.ietf.org/doc/rfc6962},
  abstract    = {This document describes an experimental protocol for publicly logging the existence of Transport Layer Security ({TLS}) certificates as they are issued or observed, in a manner that allows anyone to audit certificate authority ({CA}) activity and notice the issuance of suspect certificates as well as to audit the certificate logs themselves. The intent is that eventually clients would refuse to honor certificates that do not appear in a log, effectively forcing {CAs} to add all issued certificates to the logs. Logs are network services that implement the protocol operations for submissions and queries that are defined in this document.},
  number      = {{RFC} 6962},
  institution = {Internet Engineering Task Force},
  type        = {Request for Comments},
  author      = {Laurie, Ben and Langley, Adam and Kasper, Emilia},
  urldate     = {2022-02-17},
  date        = {2013-06},
  doi         = {10.17487/RFC6962},
  note        = {Num Pages: 27},
  file        = {Full Text PDF:C\:\\Users\\johan.moritz\\Zotero\\storage\\W4E4T34J\\Laurie et al. - 2013 - Certificate Transparency.pdf:application/pdf}
}

@article{zahed_benisi_blockchain-based_2020,
  title        = {Blockchain-based decentralized storage networks: A survey},
  volume       = {162},
  issn         = {10848045},
  url          = {https://linkinghub.elsevier.com/retrieve/pii/S1084804520301302},
  doi          = {10.1016/j.jnca.2020.102656},
  shorttitle   = {Blockchain-based decentralized storage networks},
  abstract     = {Blockchain is a new approach to create a distributed network which was ﬁrst introduced in 2008. By the help of this disruptive technology a peer-to-peer network can be formed where nodes have to reach a consensus and form a chain from accepted blocks, while no central party or trusted controller is required. Among all the existing uses of this technology, decentralized storage systems are one of its prominent applications. Decentralized storage networks, are consisted of a group of people willing to rent out their unused hardware storage space. By implementing end-to-end encryption clients can securely transmit their ﬁles through a fully decentralized network and eliminate the risk of data failures that arise from centralized controls. In this network, storage providers are required to prove that they store unaltered ﬁles during the time. Also a smart contract between two parties is set out in which rental duration and cost that the customer needs to pay for using that storage space is clariﬁed. This paper presents a comprehensive survey on the blockchain-based storage systems and how they work and then compares them with cloud-based storage networks. Also different techniques of consensus protocols in each group are explored. Next, we have an overview on the advantages and also weak points of blockchain-based storage systems. Finally, we discuss about future research directions.},
  pages        = {102656},
  journaltitle = {Journal of Network and Computer Applications},
  shortjournal = {Journal of Network and Computer Applications},
  author       = {Zahed Benisi, Nazanin and Aminian, Mehdi and Javadi, Bahman},
  urldate      = {2022-02-02},
  date         = {2020-07},
  langid       = {english},
  file         = {Zahed Benisi et al. - 2020 - Blockchain-based decentralized storage networks A.pdf:C\:\\Users\\johan.moritz\\Zotero\\storage\\79TG8FTV\\Zahed Benisi et al. - 2020 - Blockchain-based decentralized storage networks A.pdf:application/pdf}
}

@article{lamport2001paxos,
  title   = {Paxos made simple},
  author  = {Lamport, Leslie},
  journal = {ACM SIGACT News (Distributed Computing Column) 32, 4 (Whole Number 121, December 2001)},
  pages   = {51--58},
  year    = {2001}
}

@incollection{goos_consensus_1983,
  location    = {Berlin, Heidelberg},
  title       = {The consensus problem in unreliable distributed systems (a brief survey)},
  volume      = {158},
  isbn        = {978-3-540-12689-8 978-3-540-38682-7},
  url         = {http://link.springer.com/10.1007/3-540-12689-9_99},
  abstract    = {Agreement problems involve a system of processes, some of which may be faulty. A fundamental problem of fault-tolerant distributed computing is for the reliable processes to reach a consensus. We survey the considerable literature on this problem that has developed over the past few years and give an informal overview of the major theoretical results in the area.},
  pages       = {127--140},
  booktitle   = {Foundations of Computation Theory},
  publisher   = {Springer Berlin Heidelberg},
  author      = {Fischer, Michael J.},
  editor      = {Karpinski, Marek},
  editorb     = {Goos, G. and Hartmanis, J. and Barstow, D. and Brauer, W. and Brinch Hansen, P. and Gries, D. and Luckham, D. and Moler, C. and Pnueli, A. and Seegmüller, G. and Stoer, J. and Wirth, N.},
  editorbtype = {redactor},
  urldate     = {2022-02-17},
  date        = {1983},
  langid      = {english},
  doi         = {10.1007/3-540-12689-9_99},
  note        = {Series Title: Lecture Notes in Computer Science},
  file        = {Fischer - 1983 - The consensus problem in unreliable distributed sy.pdf:C\:\\Users\\johan.moritz\\Zotero\\storage\\JH4QSEGU\\Fischer - 1983 - The consensus problem in unreliable distributed sy.pdf:application/pdf}
}

@article{nguyen_survey_2018,
  title        = {A Survey about Consensus Algorithms Used in Blockchain},
  volume       = {14},
  url          = {https://doi.org/10.3745/JIPS.01.0024},
  doi          = {10.3745/JIPS.01.0024},
  abstract     = {Thanks to its potential in many applications, Blockchain has recently been nominated as one of the technologies exciting intense attention. Blockchain has solved the problem of changing the original low-trust centralized ledger held by a single third-party, to a high-trust decentralized form held by different entities, or in other words, verifying nodes. The key contribution of the work of Blockchain is the consensus algorithm, which decides how agreement is made to append a new block between all nodes in the verifying network. Blockchain algorithms can be categorized into two main groups. The first group is proof-based consensus, which requires the nodes joining the verifying network to show that they are more qualified than the others to do the appending work. The second group is voting-based consensus, which requires nodes in the network to exchange their results of verifying a new block or transaction, before making the final decision. In this paper, we present a review of the Blockchain consensus algorithms that have been researched and that are being applied in some well-known applications at this time.},
  pages        = {101--128},
  number       = {1},
  journaltitle = {Journal of Information Processing Systems},
  author       = {Nguyen, Giang-Truong and Kim, Kyungbaek},
  urldate      = {2022-02-11},
  date         = {2018-02-28},
  langid       = {english},
  file         = {Nguyen and Kim - 2018 - A Survey about Consensus Algorithms Used in Blockc.pdf:C\:\\Users\\johan.moritz\\Zotero\\storage\\44UMS3I3\\Nguyen and Kim - 2018 - A Survey about Consensus Algorithms Used in Blockc.pdf:application/pdf}
}

@online{reproducible_builds_project,
  title   = {Reproducible Builds — a set of software development practices that create an independently-verifiable path from source to binary code},
  url     = {https://reproducible-builds.org/},
  urldate = {2022-02-07},
  file    = {Reproducible Builds — a set of software development practices that create an independently-verifiable path from source to binary code:C\:\\Users\\johan.moritz\\Zotero\\storage\\EZ9WSCZT\\reproducible-builds.org.html:text/html}
}

@article{samonas_cia_nodate,
  title    = {{THE} {CIA} {STRIKES} {BACK}: {REDEFINING} {CONFIDENTIALITY}, {INTEGRITY} {AND} {AVAILABILITY} {IN} {SECURITY}},
  abstract = {This paper reviews the history of the {CIA} (Confidentiality, Integrity and Availability) triad from the perspectives of information security practitioners and scholars. Whilst the former have trusted the technical orientation of the triad as a unique point of reference in information security, the latter have questioned the triad’s capacity of addressing the breadth of socio-technical issues that have emerged in security since the 2000s. Through a revisiting of the key tenets of the triad, the paper reconciles these two, seemingly fragmented, approaches. The main argument is that the {CIA} triad will continue to assume a major role in information security practice. However, this is not due to the fact that practitioners have discarded, or rejected the enhancements that socio-technical security scholars have proposed over the years; rather, it is because these enhancements can be accommodated by a broader re-conceptualization of the original {CIA} triad. The paper concludes with potential areas for future research.},
  pages    = {25},
  author   = {Samonas, Spyridon and Coss, David},
  langid   = {english},
  file     = {Samonas and Coss - THE CIA STRIKES BACK REDEFINING CONFIDENTIALITY, .pdf:C\:\\Users\\johan.moritz\\Zotero\\storage\\EU5JHDEL\\Samonas and Coss - THE CIA STRIKES BACK REDEFINING CONFIDENTIALITY, .pdf:application/pdf}
}

@article{thompson_reflections_1984,
  title  = {Reflections on trusting trust},
  volume = {27},
  pages  = {3},
  number = {8},
  author = {Thompson, Ken},
  date   = {1984},
  langid = {english},
  file   = {Thompson - 1984 - Reflections on trusting trust.pdf:C\:\\Users\\johan.moritz\\Zotero\\storage\\RAKH42KD\\Thompson - 1984 - Reflections on trusting trust.pdf:application/pdf}
}

@online{rebuilderd_public_nodate,
  title    = {Public rebuilderd instances},
  url      = {https://rebuilderd.com/},
  abstract = {rebuilderd is a build system that attempts to reproduce build artifacts. It compiles the source code in a similar build environment and compares it to the official pre-built artifacts. This helps identify supply-chain compromises. This website hosts a list of public instances publishing their results.},
  urldate  = {2022-02-07},
  langid   = {english},
  file     = {Snapshot:C\:\\Users\\johan.moritz\\Zotero\\storage\\V2AAF9IW\\rebuilderd.com.html:text/html}
}

@inproceedings{androulaki_hyperledger_2018,
  location   = {Porto Portugal},
  title      = {Hyperledger fabric: a distributed operating system for permissioned blockchains},
  isbn       = {978-1-4503-5584-1},
  url        = {https://dl.acm.org/doi/10.1145/3190508.3190538},
  doi        = {10.1145/3190508.3190538},
  shorttitle = {Hyperledger fabric},
  abstract   = {Fabric is a modular and extensible open-source system for deploying and operating permissioned blockchains and one of the Hyperledger projects hosted by the Linux Foundation (www.hyperledger.org).},
  eventtitle = {{EuroSys} '18: Thirteenth {EuroSys} Conference 2018},
  pages      = {1--15},
  booktitle  = {Proceedings of the Thirteenth {EuroSys} Conference},
  publisher  = {{ACM}},
  author     = {Androulaki, Elli and Barger, Artem and Bortnikov, Vita and Cachin, Christian and Christidis, Konstantinos and De Caro, Angelo and Enyeart, David and Ferris, Christopher and Laventman, Gennady and Manevich, Yacov and Muralidharan, Srinivasan and Murthy, Chet and Nguyen, Binh and Sethi, Manish and Singh, Gari and Smith, Keith and Sorniotti, Alessandro and Stathakopoulou, Chrysoula and Vukolić, Marko and Cocco, Sharon Weed and Yellick, Jason},
  urldate    = {2022-02-21},
  date       = {2018-04-23},
  langid     = {english},
  file       = {Androulaki et al. - 2018 - Hyperledger fabric a distributed operating system.pdf:C\:\\Users\\johan.moritz\\Zotero\\storage\\24LDSJJD\\Androulaki et al. - 2018 - Hyperledger fabric a distributed operating system.pdf:application/pdf}
}

@inproceedings{barger_byzantine_2021,
  title      = {A Byzantine Fault-Tolerant Consensus Library for Hyperledger Fabric},
  doi        = {10.1109/ICBC51069.2021.9461099},
  abstract   = {Hyperledger Fabric is an enterprise grade permissioned distributed ledger platform that offers modularity for a broad set of industry use cases. One modular component is a pluggable ordering service that establishes consensus on the order of transactions and batches them into blocks. However, as of the time of this writing, there is no production grade Byzantine Fault-Tolerant ({BFT}) ordering service for Fabric, with the latest version (v2.3) supporting only Crash Fault-Tolerance ({CFT}).In this work we describe the design and implementation of a {BFT} ordering service for Fabric, employing a new {BFT} consensus library. The new library, based on the {BFT}-{SMART} protocol and written in Go, is tailored to the blockchain use-case, yet is general enough to cater to a wide variety of other uses. The {BFT} library's design and integration into Fabric address crucial aspects that were left unsolved in all prior work, making them unfit for production use. We evaluate the new {BFT} ordering service by comparing it with the currently supported Raft-based {CFT} ordering service in Hyperledger Fabric.},
  eventtitle = {2021 {IEEE} International Conference on Blockchain and Cryptocurrency ({ICBC})},
  pages      = {1--9},
  booktitle  = {2021 {IEEE} International Conference on Blockchain and Cryptocurrency ({ICBC})},
  author     = {Barger, Artem and Manevich, Yacov and Meir, Hagar and Tock, Yoav},
  date       = {2021-05},
  keywords   = {Blockchain, Distributed ledger, Distributed Ledger, Fault tolerance, Fault tolerant systems, Production, Protocols, Writing},
  file       = {IEEE Xplore Full Text PDF:C\:\\Users\\johan.moritz\\Zotero\\storage\\RWS2TJY3\\Barger et al. - 2021 - A Byzantine Fault-Tolerant Consensus Library for H.pdf:application/pdf}
}

@article{di_pierro_what_2017,
  title        = {What Is the Blockchain?},
  volume       = {19},
  issn         = {1558-366X},
  doi          = {10.1109/MCSE.2017.3421554},
  abstract     = {Blockchain is a new technology, based on hashing, which is at the foundation of the platforms for trading cryptocurrencies and executing smart contracts. This article reviews the basic ideas of this technology and provides a sample minimalist implementation in Python.},
  pages        = {92--95},
  number       = {5},
  journaltitle = {Computing in Science Engineering},
  author       = {Di Pierro, Massimo},
  date         = {2017},
  note         = {Conference Name: Computing in Science Engineering},
  keywords     = {Authentication, Bitcoin, blockchain, Contracts, cryptography, Digital signatures, finance, Peer-to-peer computing, scientific computing},
  file         = {IEEE Xplore Full Text PDF:C\:\\Users\\johan.moritz\\Zotero\\storage\\PNKB8LX5\\Di Pierro - 2017 - What Is the Blockchain.pdf:application/pdf;IEEE Xplore Abstract Record:C\:\\Users\\johan.moritz\\Zotero\\storage\\52IIHWDA\\8024092.html:text/html}
}

@article{nakamoto_bitcoin_nodate,
  title    = {Bitcoin: A Peer-to-Peer Electronic Cash System},
  abstract = {A purely peer-to-peer version of electronic cash would allow online payments to be sent directly from one party to another without going through a financial institution. Digital signatures provide part of the solution, but the main benefits are lost if a trusted third party is still required to prevent double-spending. We propose a solution to the double-spending problem using a peer-to-peer network. The network timestamps transactions by hashing them into an ongoing chain of hash-based proof-of-work, forming a record that cannot be changed without redoing the proof-of-work. The longest chain not only serves as proof of the sequence of events witnessed, but proof that it came from the largest pool of {CPU} power. As long as a majority of {CPU} power is controlled by nodes that are not cooperating to attack the network, they'll generate the longest chain and outpace attackers. The network itself requires minimal structure. Messages are broadcast on a best effort basis, and nodes can leave and rejoin the network at will, accepting the longest proof-of-work chain as proof of what happened while they were gone.},
  pages    = {9},
  author   = {Nakamoto, Satoshi},
  langid   = {english},
  file     = {Nakamoto - Bitcoin A Peer-to-Peer Electronic Cash System.pdf:C\:\\Users\\johan.moritz\\Zotero\\storage\\AL2SD348\\Nakamoto - Bitcoin A Peer-to-Peer Electronic Cash System.pdf:application/pdf}
}

@online{fabric_gateway_2022,
  title   = {Fabric Gateway — hyperledger-fabricdocs main documentation},
  url     = {https://hyperledger-fabric.readthedocs.io/en/release-2.4/gateway.html},
  urldate = {2022-02-22},
  file    = {Fabric Gateway — hyperledger-fabricdocs main documentation:C\:\\Users\\johan.moritz\\Zotero\\storage\\8ZTJYHC9\\gateway.html:text/html}
}

@article{abdui-rahman_distributed_nodate,
  title    = {A Distributed Trust Model},
  abstract = {The widespread use of the Internet signals theneed for a better understanding of trust as a basis for secure on-line interaction. In the face of increasing uncertainty and risk, users must be allowed to reason flectively about the trustworthiness of on-line entities. In this paper, we outline the shortcomings of current security approaches for managing trust and propose a model for trust, based on distributed recommendations.},
  pages    = {13},
  author   = {Abdui-Rahman, Aifarez and Hailes, Stephen and Hailes, S},
  langid   = {english},
  file     = {Abdui-Rahman et al. - A Distributed Trust Model.pdf:C\:\\Users\\johan.moritz\\Zotero\\storage\\UHHNZVPM\\Abdui-Rahman et al. - A Distributed Trust Model.pdf:application/pdf}
}

@article{ongaro_raft_2014,
  title    = {In Search of an Understandable Consensus Algorithm},
  abstract = {Raft is a consensus algorithm for managing a replicated log. It produces a result equivalent to (multi-)Paxos, and it is as efﬁcient as Paxos, but its structure is different from Paxos; this makes Raft more understandable than Paxos and also provides a better foundation for building practical systems. In order to enhance understandability, Raft separates the key elements of consensus, such as leader election, log replication, and safety, and it enforces a stronger degree of coherency to reduce the number of states that must be considered. Results from a user study demonstrate that Raft is easier for students to learn than Paxos. Raft also includes a new mechanism for changing the cluster membership, which uses overlapping majorities to guarantee safety.},
  pages    = {16},
  author   = {Ongaro, Diego and Ousterhout, John},
  langid   = {english},
  file     = {Ongaro and Ousterhout - In Search of an Understandable Consensus Algorithm.pdf:C\:\\Users\\johan.moritz\\Zotero\\storage\\TEAD9BZI\\Ongaro and Ousterhout - In Search of an Understandable Consensus Algorithm.pdf:application/pdf}
}


@inproceedings{ince_blockchain_2020,
  title      = {Blockchain Based Distributed Package Management Architecture},
  doi        = {10.1109/UBMK50275.2020.9219374},
  abstract   = {Application management in Linux based operating systems is managed by package managers. The package repositories of most Linux distributions provide software through central servers. While having a central server provides a unique verified and maintained version, servers often separate official and community packages, and users frequently use community packages. However, some highly demanded community packages may not be stored in official repositories. While central servers are open to a single point of failure, using community packages without any security check may be insecure. In this paper, we introduce the idea of a distributed package management architecture for Linux systems based on blockchain technology. In the proposed system, package providers are considered as miners, building a package is mining, and proof-of-work is reproducible packaging by the miners. The blockchain keeps the hash of the package contents. Creating and testing a package will return to the packager as reliability scores. This system will have the following advantages. Packages will be verified through consensus, single points of failure will be eliminated ensuring availability, packages are stored in a distributed network. The goal is to keep the operating system alive with a decentralized, reliable, and transparent blockchain-based package management system.},
  eventtitle = {2020 5th International Conference on Computer Science and Engineering ({UBMK})},
  pages      = {238--242},
  booktitle  = {2020 5th International Conference on Computer Science and Engineering ({UBMK})},
  author     = {Ince, M. Numan and Ak, Murat and Gunay, Melih},
  date       = {2020-09},
  keywords   = {Blockchain, Global Positioning System, Hafnium compounds, Linux, {MILIS} Linux, Operating systems, Optical fibers, P2P Network, Package Management, Servers},
  file       = {IEEE Xplore Full Text PDF:C\:\\Users\\johan.moritz\\Zotero\\storage\\WFIK4AA8\\Ince et al. - 2020 - Blockchain Based Distributed Package Management Ar.pdf:application/pdf;IEEE Xplore Abstract Record:C\:\\Users\\johan.moritz\\Zotero\\storage\\XFEJMB64\\9219374.html:text/html}
}

@inproceedings{blahser_thine_2021,
  title      = {Thine — Approach for a fault tolerant distributed packet manager based on hypercore protocol},
  doi        = {10.1109/COMPSAC51774.2021.00266},
  abstract   = {There are a range of package managers out there which are used in almost every software development project to integrate third party packages to a project. These packages are usually stored in central repositories in the cloud. This central cloud approach brings some downsides especially with regard to fault tolerance which we want to tackle with our approach inspired by thoughts of dew computing. In this paper we present a fully distributed package manager which can be used on cloud as well as on the edge or in a hybrid environment. The approach is based on a peer-to-peer network, implemented with hypercore protocol.},
  eventtitle = {2021 {IEEE} 45th Annual Computers, Software, and Applications Conference ({COMPSAC})},
  pages      = {1778--1782},
  booktitle  = {2021 {IEEE} 45th Annual Computers, Software, and Applications Conference ({COMPSAC})},
  author     = {Blähser, Jannik and Göller, Tim and Böhmer, Matthias},
  date       = {2021-07},
  note       = {{ISSN}: 0730-3157},
  keywords   = {Conferences, Fault tolerance, Fault tolerant systems, Java, Protocols, Prototypes, Software},
  file       = {IEEE Xplore Full Text PDF:C\:\\Users\\johan.moritz\\Zotero\\storage\\NBNIEPJP\\Blähser et al. - 2021 - Thine — Approach for a fault tolerant distributed .pdf:application/pdf;IEEE Xplore Abstract Record:C\:\\Users\\johan.moritz\\Zotero\\storage\\ZMDEDTY5\\9529611.html:text/html}
}

@inproceedings{zichichi_efficiency_2020,
  title      = {On the Efficiency of Decentralized File Storage for Personal Information Management Systems},
  doi        = {10.1109/ISCC50000.2020.9219623},
  abstract   = {This paper presents an architecture, based on Distributed Ledger Technologies ({DLTs}) and Decentralized File Storage ({DFS}) systems, to support the use of Personal Information Management Systems ({PIMS}). {DLT} and {DFS} are used to manage data sensed by mobile users equipped with devices with sensing capability. {DLTs} guarantee the immutability, traceability and verifiability of references to personal data, that are stored in {DFS}. In fact, the inclusion of data digests in the {DLT} makes it possible to obtain an unalterable reference and a tamper-proof log, while remaining compliant with the regulations on personal data, i.e. {GDPR}. We provide an experimental evaluation on the feasibility of the use of {DFS}. Three different scenarios have been studied: i) a proprietary {IPFS} approach with a dedicated node interfacing with the data producers, ii) a public {IPFS} service and iii) Sia Skynet. Results show that through proper configuration of the system infrastructure, it is viable to build a decentralized Personal Data Storage ({PDS}).},
  eventtitle = {2020 {IEEE} Symposium on Computers and Communications ({ISCC})},
  pages      = {1--6},
  booktitle  = {2020 {IEEE} Symposium on Computers and Communications ({ISCC})},
  author     = {Zichichi, Mirko and Ferretti, Stefano and D’Angelo, Gabriele},
  date       = {2020-07},
  note       = {{ISSN}: 2642-7389},
  keywords   = {Memory, Computers, Decentralized File Storage, Distributed ledger, Distributed Ledger Technologies, Information management, Performance evaluation, Personal Information Management System, Regulation, Reliability engineering, Sensing as a Service},
  file       = {IEEE Xplore Full Text PDF:C\:\\Users\\johan.moritz\\Zotero\\storage\\B88J2R29\\Zichichi et al. - 2020 - On the Efficiency of Decentralized File Storage fo.pdf:application/pdf;IEEE Xplore Abstract Record:C\:\\Users\\johan.moritz\\Zotero\\storage\\C3PQ3VXX\\9219623.html:text/html}
}

@inproceedings{liu_data_2018,
  title      = {A Data Storage Method Based on Blockchain for Decentralization {DNS}},
  doi        = {10.1109/DSC.2018.00035},
  abstract   = {As a distributed database mapping the domain name and {IP} address, {DNS} makes it easier to access the Internet However, {DNS} relies on the resolution of the root server, which is a hierarchical network topology centered on the root. It is vulnerable to single points of failure and domain name resolution data tampered, affects the normal service of Internet domain name resolution seriously. To solve this problem, we proposed a new blockchain-based decentralization {DNS} data storage method by studying the principle and characteristics of blockchain. And implement a decentralization system {DecDNS} to establish multiple parallel {DNS} nodes, store the key information of the zone file resolution data. In the experiment, we proactively invalidated multiple nodes in the parallel resolution node and tampered the domain name resolution data. The experimental results show that, the {DecDNS} can provide normal resolution services, solve the problem of single point failure and the falsification of domain name resolution data. While compatible with the original domain name system, it is also enhances the stability and security of {DNS} framework, so it is an effective and feasible solution.},
  eventtitle = {2018 {IEEE} Third International Conference on Data Science in Cyberspace ({DSC})},
  pages      = {189--196},
  booktitle  = {2018 {IEEE} Third International Conference on Data Science in Cyberspace ({DSC})},
  author     = {Liu, Jingqiang and Li, Bin and Chen, Lizhang and Hou, Meng and Xiang, Feiran and Wang, Peijun},
  date       = {2018-06},
  keywords   = {Servers, blockchain, Cloud computing, Contracts, data storage, decentralization, {DNS}, Memory, single point failure},
  file       = {IEEE Xplore Full Text PDF:C\:\\Users\\johan.moritz\\Zotero\\storage\\C4R5KMWR\\Liu et al. - 2018 - A Data Storage Method Based on Blockchain for Dece.pdf:application/pdf;IEEE Xplore Abstract Record:C\:\\Users\\johan.moritz\\Zotero\\storage\\MFFE37I8\\8411856.html:text/html}
}

@inproceedings{lamsweerde_formal_2000,
  location   = {Limerick, Ireland},
  title      = {Formal specification: a roadmap},
  isbn       = {978-1-58113-253-3},
  url        = {http://portal.acm.org/citation.cfm?doid=336512.336546},
  doi        = {10.1145/336512.336546},
  shorttitle = {Formal specification},
  abstract   = {Formal specifications have been a focus of software engineering research for many years and have been applied in a wide variety of settings. Their industrial use is still limited but has been steadily growing. After recalling the essence, role, usage, and pitfalls of formal specification, the paper reviews the main specification paradigms to date and discuss their evaluation criteria. It then provides a brief assessment of the current strengths and weaknesses of today's formal specification technology. This provides a basis for formulating a number of requirements for formal specification to become a core software engineering activity in the future.},
  eventtitle = {the conference},
  pages      = {147--159},
  booktitle  = {Proceedings of the conference on The future of Software engineering  - {ICSE} '00},
  publisher  = {{ACM} Press},
  author     = {Lamsweerde, Axel van},
  urldate    = {2022-03-02},
  date       = {2000},
  langid     = {english},
  file       = {Lamsweerde - 2000 - Formal specification a roadmap.pdf:C\:\\Users\\johan.moritz\\Zotero\\storage\\UAQA5VZC\\Lamsweerde - 2000 - Formal specification a roadmap.pdf:application/pdf}
}

@article{lamport_specifying_2001,
  title  = {Specifying Concurrent Systems with {TLA}+},
  pages  = {372},
  author = {Lamport, Leslie},
  langid = {english},
  file   = {Lamport - Specifying Concurrent Systems with TLA+.pdf:C\:\\Users\\johan.moritz\\Zotero\\storage\\C3SXJMYB\\Lamport - Specifying Concurrent Systems with TLA+.pdf:application/pdf}
}

@article{joshi_checking_2003,
  title        = {Checking Cache-Coherence Protocols with {TLA}+},
  volume       = {22},
  issn         = {0925-9856, 1572-8102},
  url          = {http://link.springer.com/10.1023/A:1022969405325},
  doi          = {10.1023/A:1022969405325},
  abstract     = {We have a great deal of experience using the speciﬁcation language {TLA}+ and its model checker {TLC} to analyze protocols designed at Digital and Compaq (both now part of {HP}). The tools and techniques we have developed apply equally well to software and hardware designs. In this paper, we describe our experience using {TLA}+ and {TLC} to verify cache-coherence protocols.},
  pages        = {125--131},
  number       = {2},
  journaltitle = {Formal Methods in System Design},
  shortjournal = {Formal Methods in System Design},
  author       = {Joshi, Rajeev and Lamport, Leslie and Matthews, John and Tasiran, Serdar and Tuttle, Mark and Yu, Yuan},
  urldate      = {2022-03-02},
  date         = {2003-03},
  langid       = {english},
  file         = {Joshi et al. - 2003 - Checking Cache-Coherence Protocols with TLA+.pdf:C\:\\Users\\johan.moritz\\Zotero\\storage\\T9Q3I7GJ\\Joshi et al. - 2003 - Checking Cache-Coherence Protocols with TLA+.pdf:application/pdf}
}

@article{newcombe_how_2015,
  title        = {How Amazon web services uses formal methods},
  volume       = {58},
  issn         = {0001-0782, 1557-7317},
  url          = {https://dl.acm.org/doi/10.1145/2699417},
  doi          = {10.1145/2699417},
  abstract     = {Engineers use {TLA}+ to prevent serious but subtle bugs from reaching production.},
  pages        = {66--73},
  number       = {4},
  journaltitle = {Communications of the {ACM}},
  shortjournal = {Commun. {ACM}},
  author       = {Newcombe, Chris and Rath, Tim and Zhang, Fan and Munteanu, Bogdan and Brooker, Marc and Deardeuff, Michael},
  urldate      = {2022-03-02},
  date         = {2015-03-23},
  langid       = {english},
  file         = {Newcombe et al. - 2015 - How Amazon web services uses formal methods.pdf:C\:\\Users\\johan.moritz\\Zotero\\storage\\LN6PTUGD\\Newcombe et al. - 2015 - How Amazon web services uses formal methods.pdf:application/pdf}
}

@article{lamport_temporal_1994,
  title        = {The temporal logic of actions},
  volume       = {16},
  issn         = {0164-0925, 1558-4593},
  url          = {https://dl.acm.org/doi/10.1145/177492.177726},
  doi          = {10.1145/177492.177726},
  abstract     = {The temporal logic of actions ({TLA}) is a logic for specifying and reasoning about concurrent systems. Systems and their properties are represented in the same logic, so the assertion that a system meets its specification and the assertion that one system implements another are both expressed by logical implication. {TLA} is very simple; its syntax and complete formal semantics are summarized in about a page. Yet, {TLA} is not just a logician's toy; it is extremely powerful, both in principle and in practice. This report introduces {TLA} and describes how it is used to specify and verify concurrent algorithms. The use of {TLA} to specify and reason about open systems will be described elsewhere.},
  pages        = {872--923},
  number       = {3},
  journaltitle = {{ACM} Transactions on Programming Languages and Systems},
  shortjournal = {{ACM} Trans. Program. Lang. Syst.},
  author       = {Lamport, Leslie},
  urldate      = {2022-03-02},
  date         = {1994-05},
  langid       = {english},
  file         = {Lamport - 1994 - The temporal logic of actions.pdf:C\:\\Users\\johan.moritz\\Zotero\\storage\\HYTGEBRR\\Lamport - 1994 - The temporal logic of actions.pdf:application/pdf}
}

@article{beckert_formal_2018,
  title    = {Formal Specification and Verification of Hyperledger Fabric Chaincode},
  abstract = {Smart contracts are programs building on blockchain technology. They implement functionality that has been agreed on between the concerned parties on a network. However, their immutability and exposed position make them vulnerable to programming errors, leading to faulty behavior and possible exploits. Therefore, smart contracts demand a particularly thorough analysis, ideally using formal program veriﬁcation. In this paper, we present an approach for the deductive veriﬁcation of Hyperledger Fabric smart contracts using the {KeY} prover. We have extended {KeY} to handle Fabric ledger implementations; in particular, we have developed mechanisms for reasoning about serialization and object persistence. The feasibility of our approach is demonstrated with a small case study.},
  pages    = {5},
  author   = {Beckert, Bernhard and Herda, Mihai and Kirsten, Michael and Schiffl, Jonas},
  langid   = {english},
  file     = {Beckert et al. - Formal Specification and Verification of Hyperledg.pdf:C\:\\Users\\johan.moritz\\Zotero\\storage\\TJN59J9T\\Beckert et al. - Formal Specification and Verification of Hyperledg.pdf:application/pdf}
}

@inproceedings{bhargavan_formal_2016,
  location   = {Vienna Austria},
  title      = {Formal Verification of Smart Contracts: Short Paper},
  isbn       = {978-1-4503-4574-3},
  url        = {https://dl.acm.org/doi/10.1145/2993600.2993611},
  doi        = {10.1145/2993600.2993611},
  shorttitle = {Formal Verification of Smart Contracts},
  abstract   = {Ethereum is a framework for cryptocurrencies which uses blockchain technology to provide an open global computing platform, called the Ethereum Virtual Machine ({EVM}). {EVM} executes bytecode on a simple stack machine. Programmers do not usually write {EVM} code; instead, they can program in a {JavaScript}-like language, called Solidity, that compiles to bytecode. Since the main purpose of {EVM} is to execute smart contracts that manage and transfer digital assets (called Ether ), security is of paramount importance. However, writing secure smart contracts can be extremely diﬃcult: due to the openness of Ethereum, both programs and pseudonymous users can call into the public methods of other programs, leading to potentially dangerous compositions of trusted and untrusted code. This risk was recently illustrated by an attack on {TheDAO} contract that exploited subtle details of the {EVM} semantics to transfer roughly \$50M worth of Ether into the control of an attacker. In this paper, we outline a framework to analyze and verify both the runtime safety and the functional correctness of Ethereum contracts by translation to F , a functional programming language aimed at program veriﬁcation.},
  eventtitle = {{CCS}'16: 2016 {ACM} {SIGSAC} Conference on Computer and Communications Security},
  pages      = {91--96},
  booktitle  = {Proceedings of the 2016 {ACM} Workshop on Programming Languages and Analysis for Security},
  publisher  = {{ACM}},
  author     = {Bhargavan, Karthikeyan and Delignat-Lavaud, Antoine and Fournet, Cédric and Gollamudi, Anitha and Gonthier, Georges and Kobeissi, Nadim and Kulatova, Natalia and Rastogi, Aseem and Sibut-Pinote, Thomas and Swamy, Nikhil and Zanella-Béguelin, Santiago},
  urldate    = {2022-03-09},
  date       = {2016-10-24},
  langid     = {english},
  file       = {Bhargavan et al. - 2016 - Formal Verification of Smart Contracts Short Pape.pdf:C\:\\Users\\johan.moritz\\Zotero\\storage\\234XZEWT\\Bhargavan et al. - 2016 - Formal Verification of Smart Contracts Short Pape.pdf:application/pdf}
}

@inproceedings{latif_blockchain_2019,
  title      = {Blockchain and {IoT} Based Formal Model of Smart Waste Management System Using {TLA}+},
  doi        = {10.1109/FIT47737.2019.00064},
  abstract   = {The mechanism of integrating smart nodes with each other using a network to communicate, share information is known as Internet of Things ({IoT}). The usage and simulation of {IoT} infrastructure in every field is increasing rapidly. Blockchain technology refers to as the interconnected nodes within a network which are independent of each other work as a network. Any node can be a part of blockchain by the permission granted from blocks of blockchain. Blockchain technology is one of the most popular technologies which is used to make processes secured and enhance security of the system. There are many components of smart city which are based on {IoT} and blockchain technology such as smart water monitoring, sewerage, parking, homes, street lightening, offices, campuses and waste management. We have addressed smart waste management system in which we have integrated different techniques for providing modeling of smart waste management system using {IoT} and blockchain. The integrated technologies include blockchain, {IoT}, Unified Modeling Language ({UML}) and Temporal Logic of Actions ({TLA}+) for modeling and automating waste management system. There are many operations defined in our model include identification of waste material, trace location, send to trash, categorize waste, transfer waste, recycling and decision-making process. Blockchain based {UML} model represents the system working in detail. Further {UML} models are converted into formal model to validate the proposed model formally. The proposed model provides the proof of correctness, preciseness and completeness of our proposed model using {TLA}+ specification language.},
  eventtitle = {2019 International Conference on Frontiers of Information Technology ({FIT})},
  pages      = {304--3045},
  booktitle  = {2019 International Conference on Frontiers of Information Technology ({FIT})},
  author     = {Latif, Saba and Rehman, Aniqa and Zafar, Nazir Ahmad},
  date       = {2019-12},
  note       = {{ISSN}: 2334-3141},
  keywords   = {waste management, {UML}, formal methods, verification and validation, {TLA}+},
  file       = {IEEE Xplore Full Text PDF:C\:\\Users\\johan.moritz\\Zotero\\storage\\G7QCYEK7\\Latif et al. - 2019 - Blockchain and IoT Based Formal Model of Smart Was.pdf:application/pdf;IEEE Xplore Abstract Record:C\:\\Users\\johan.moritz\\Zotero\\storage\\Z9LLHKED\\8991646.html:text/html}
}

@online{noauthor_creative_nodate,
  title   = {Creative Commons — Attribution 4.0 International — {CC} {BY} 4.0},
  url     = {https://creativecommons.org/licenses/by/4.0/},
  urldate = {2022-03-23},
  file    = {Creative Commons — Attribution 4.0 International — CC BY 4.0:C\:\\Users\\johan.moritz\\Zotero\\storage\\ZH2J8WAC\\4.0.html:text/html}
}

@online{hyperledger_transaction-flow_nodate,
  title   = {Transaction Flow — hyperledger-fabricdocs main documentation},
  url     = {https://hyperledger-fabric.readthedocs.io/en/release-2.4/txflow.html},
  urldate = {2022-03-23},
  file    = {Transaction Flow — hyperledger-fabricdocs main documentation:C\:\\Users\\johan.moritz\\Zotero\\storage\\XDMM7FY5\\txflow.html:text/html}
}

@online{linux-foundation_projects_nodate,
  title      = {Linux Foundation Projects},
  url        = {https://www.linuxfoundation.org/projects/},
  abstract   = {Revolutionizing industries and tackling the important technology challenges of today.},
  titleaddon = {Linux Foundation},
  urldate    = {2022-03-23},
  langid     = {american},
  file       = {Snapshot:C\:\\Users\\johan.moritz\\Zotero\\storage\\A9BEE4W3\\projects.html:text/html}
}

@online{hyperledger_fabric-samples_2022,
  title      = {hyperledger fabric-samples},
  url        = {https://github.com/hyperledger/fabric-samples},
  abstract   = {Contribute to hyperledger/fabric-samples development by creating an account on {GitHub}.},
  titleaddon = {{GitHub}},
  urldate    = {2022-03-24},
  langid     = {english},
  file       = {Snapshot:C\:\\Users\\johan.moritz\\Zotero\\storage\\N6X5U36J\\fabric-samples.html:text/html}
}

@article{maurer_modelling_nodate,
  title    = {Modelling a public-key infrastructure},
  abstract = {A global public-key infrastructure ({PKI}), components of which are emerging in the near future, is a prerequisite for security in distributed systems and for electronic commerce. The purpose of this paper is to propose an approach to modelling and reasoning about a {PKI} from a user Alice's point of view. Her view, from which she draws conclusions about the authenticity of other entities' public keys and possibly about the trustworthiness of other entities, consists of statements about which public keys she believes to be authentic and which entities she believes to be trustworthy, as well as a collection of certificates and recommendations obtained or retrieved from the {PKI}. The model takes into account recommendations for the trustworthiness of entities. Furthermore, it includes confidence values for statements and can exploit arbitrary certification structures containing multiple intersecting certification paths to achieve a higher confidence value than for any single certification path. Confidence values are measured on a continuous scale between 0 and 1 and, in contrast to previous work in this area, are interpreted as probabilities in a well-defined random experiment.},
  pages    = {26},
  author   = {Maurer, Ueli},
  langid   = {english},
  file     = {Maurer - Modelling a public-key infrastructure.pdf:C\:\\Users\\johan.moritz\\Zotero\\storage\\H96H9ELB\\Maurer - Modelling a public-key infrastructure.pdf:application/pdf}
}

@incollection{goos_model_1999,
  location    = {Berlin, Heidelberg},
  title       = {Model Checking {TLA}+ Specifications},
  volume      = {1703},
  isbn        = {978-3-540-66559-5 978-3-540-48153-9},
  url         = {http://link.springer.com/10.1007/3-540-48153-2_6},
  abstract    = {{TLA}+ is a speciﬁcation language for concurrent and reactive systems that combines the temporal logic {TLA} with full ﬁrst-order logic and {ZF} set theory. {TLC} is a new model checker for debugging a {TLA}+ speciﬁcation by checking invariance properties of a ﬁnite-state model of the speciﬁcation. It accepts a subclass of {TLA}+ speciﬁcations that should include most descriptions of real system designs. It has been used by engineers to ﬁnd errors in the cache coherence protocol for a new Compaq multiprocessor. We describe {TLA}+ speciﬁcations and their {TLC} models, how {TLC} works, and our experience using it.},
  pages       = {54--66},
  booktitle   = {Correct Hardware Design and Verification Methods},
  publisher   = {Springer Berlin Heidelberg},
  author      = {Yu, Yuan and Manolios, Panagiotis and Lamport, Leslie},
  editor      = {Pierre, Laurence and Kropf, Thomas},
  editorb     = {Goos, Gerhard and Hartmanis, Juris and van Leeuwen, Jan},
  editorbtype = {redactor},
  urldate     = {2022-03-01},
  date        = {1999},
  langid      = {english},
  doi         = {10.1007/3-540-48153-2_6},
  note        = {Series Title: Lecture Notes in Computer Science},
  file        = {Yu et al. - 1999 - Model Checking TLA+ Specifications.pdf:C\:\\Users\\johan.moritz\\Zotero\\storage\\9LF4GJPK\\Yu et al. - 1999 - Model Checking TLA+ Specifications.pdf:application/pdf}
}

@incollection{leucker_pluscal_2009,
	location = {Berlin, Heidelberg},
	title = {The {PlusCal} Algorithm Language},
	volume = {5684},
	isbn = {978-3-642-03465-7 978-3-642-03466-4},
	url = {http://link.springer.com/10.1007/978-3-642-03466-4_2},
	pages = {36--60},
	booktitle = {Theoretical Aspects of Computing - {ICTAC} 2009},
	publisher = {Springer Berlin Heidelberg},
	author = {Lamport, Leslie},
	editor = {Leucker, Martin and Morgan, Carroll},
	urldate = {2022-03-08},
	date = {2009},
	langid = {english},
	doi = {10.1007/978-3-642-03466-4_2},
	note = {Series Title: Lecture Notes in Computer Science},
	file = {Lamport - 2009 - The PlusCal Algorithm Language.pdf:C\:\\Users\\johan.moritz\\Zotero\\storage\\M7CUAQ2I\\Lamport - 2009 - The PlusCal Algorithm Language.pdf:application/pdf},
}